{
  "hash": "f445c448019a47d959fea49d68987f67",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Module 1: Introduction to RStudio and R Basics\"\nformat: \n  revealjs:\n    scrollable: true\n    smaller: true\n---\n\n\n\n\n## Learning Objectives\n\nAfter module 1, you should be able to...\n\n-   Create and save an R script\n-   Describe the utility and differences b/w the console and an R script\n-   Modify R Studio windows\n-   Create objects\n-   Describe the difference b/w character, numeric, list, and matrix objects\n-   Reference objects in the RStudio Global Environment\n-   Use basic arithmetic operators in R\n-   Use comments within an R script to create header, sections, and make notes\n\n## Working with R -- RStudio\n\nRStudio is an Integrated Development Environment (IDE) for R\n\n-   It helps the user effectively use R\n-   Makes things easier\n-   Is NOT a dropdown statistical tool (such as Stata)\n    -   See [Rcmdr](https://cran.r-project.org/web/packages/Rcmdr/index.html) or [Radiant](http://vnijs.github.io/radiant/)\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://d33wubrfki0l68.cloudfront.net/62bcc8535a06077094ca3c29c383e37ad7334311/a263f/assets/img/logo.svg){fig-align='center' fig-alt='RStudio logo' width=30%}\n:::\n:::\n\n\n\n\n## RStudio\n\nEasier working with R\n\n-   Syntax highlighting, code completion, and smart indentation\n-   Easily manage multiple working directories and projects\n\nMore information\n\n-   Workspace browser and data viewer\n-   Plot history, zooming, and flexible image and file export\n-   Integrated R help and documentation\n-   Searchable command history\n\n## RStudio\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://ayeimanolr.files.wordpress.com/2013/04/r-rstudio-1-1.png?w=640&h=382){fig-align='center' fig-alt='RStudio' width=80%}\n:::\n:::\n\n\n\n\n## Getting the editor\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/both.png){width=90%}\n:::\n:::\n\n\n\n\n## Working with R in RStudio - 2 major panes:\n\n1)  The **Source/Editor**: \"Analysis\" Script + Interactive Exploration\n    -   Static copy of what you did (reproducibility)\n    -   Top by default\n2)  The **R Console**: \"interprets\" whatever you type\n    -   Calculator\n    -   Try things out interactively, then add to your editor\n    -   Bottom by default\n\n## Source / Editor\n\n-   Where files open to\n-   Have R code and comments in them\n-   Where code is saved\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/rstudio_script.png){width=200%}\n:::\n:::\n\n\n\n\n## R Console\n\n-   Where code is executed (where things happen)\n-   You can type here for things interactively\n-   Code is **not saved**\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/rstudio_console.png){fig-align='center' width=60%}\n:::\n:::\n\n\n\n\n\n## RStudio\n\nUseful RStudio \"cheat sheet\": <https://github.com/rstudio/cheatsheets/blob/main/rstudio-ide.pdf>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/rstudio_sheet.png){fig-align='center' fig-alt='RStudio' width=65%}\n:::\n:::\n\n\n\n\n\n## RStudio Layout\n\nIf RStudio doesn't look the way you want (or like our RStudio), then do:\n\nRStudio --\\> View --\\> Panes --\\> Pane Layout\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/pane_layout.png){fig-align='center' width=500px}\n:::\n:::\n\n\n\n\n## Workspace/Environment\n\n-   Tells you what **objects** are in R\n-   What exists in memory/what is loaded?/what did I read in?\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/rstudio_environment.png){width=90%}\n:::\n:::\n\n\n\n\n## Workspace/History\n\n-   Shows previous commands. Good to look at for debugging, but **don't rely** on it.\n-   Also type the \"up\" key in the Console to scroll through previous commands\n\n## Workspace/Other Panes\n\n-   **Files** - shows the files on your computer of the directory you are working in\n-   **Viewer** - can view data or R objects\n-   **Help** - shows help of R commands\n-   **Plots** - pictures and figures\n-   **Packages** - list of R packages that are loaded in memory\n\n## Getting Started\n\n-   File --\\> New File --\\> R Script\n-   Save the blank R script as Module1.R\n\n## Explaining output on slides\n\nIn slides, a command (we'll also call them code or a code chunk) will look like this\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"I'm code\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"I'm code\"\n```\n\n\n:::\n:::\n\n\n\n\nAnd then directly after it, will be the output of the code.  \nSo `print(\"I'm code\")` is the code chunk and `[1] \"I'm code\"` is the output.\n\n## R as a calculator\n\nYou can do basic arithmetic in R, which I surprisingly use all the time.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\n2 * 4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n\n```{.r .cell-code}\n2^3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n:::\n\n\n\n\n## R as a calculator\n\n- The R console is a full calculator\n- Try to play around with it:\n    - +, -, /, * are add, subtract, divide and multiply\n    - ^ or ** is power\n    - parentheses -- ( and ) -- work with order of operations \n    - %% finds the remainder\n    \n\n## Execute / Run Code\n\nTo execute or run a line of code, you just put your cursor on line of code and then:\n\n  1. Press Run (which you will find at the top of your window)\n\n  OR\n\n  2. Press `Cmd + Return` (iOS) OR `Ctrl + Enter` (Windows).\n\nTo execute or run multiple lines of code, you just need to highlight the code you want to run and then follow option 1 or 2.\n\n## Mini exercise \n\nExecute `5+4` from your .R file, and then find the answer 9 in the Console.\n\n## Commenting in Scripts\n\nThe syntax `#` creates a comment, which means anything to the right of `#` will not be executed / run\n\nCommenting is useful to:\n\n1. Create headers for R Scripts\n2. Create sections within an R Script\n3. Explain what is happening in your code \n\n## Commenting an R Script header\n\nAdd a comment header to Module1.R.  This is the one I typically use, but you may have your own preference.  The goal is that you are consistent so that future you / collaborators can make sense of your code.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Title: Module 1\n### Author: Amy Winter \n### Objective: Mini Exercise - Developing first R Script\n### Date: 15 July 2024\n```\n:::\n\n\n\n\n## Commenting to create sections\n\nYou can also create sections within your code by ending a comment with 4 hash marks. **This is very useful for creating an outline of your R Script.** The \"Outline\" can be found in the top right of the your source window.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Section 1 Header ####\n## Section 2 Sub-header ####\n### Section 3 Sub-sub-header ####\n#### Section 4 Sub-sub-sub-header ####\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/outline.png){width=90%}\n:::\n:::\n\n\n\n\n\n## Commenting to explain code\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## this # is still a comment\n### you can use many #'s as you want\n\n# sometimes you have a really long comment,\n#    like explaining what you are doing\n#    for a step in analysis. \n# Take it to another line\n```\n:::\n\n\n\n\n## Commenting to explain code\n\nI tend to use:\n\n-   One hash tag with a space to describe what is happening in the following few lines of code\n-   One hastag with no space after a command to list specifics \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Practicing my arithmetic\n5+2\n3*5\n9/8\n\n5+2 #5 plus 2 \n```\n:::\n\n\n\n\n## Object - Basic terms\n\n**Object** - an object is something that can be worked with in R - can be lots of different things!\n\n-   a scalar / number\n-   a vector\n-   a matrix of numbers\n-   a list\n-   a plot\n-   a function\n\n... many more\n\n## Objects\n\n- You can create objects from within the R environment and from files on your computer\n- R uses `<-` to assign values to an object name \n- Note: Object names are case-sensitive, i.e. X and x are different\n- Here are examples of creating five different objects:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumber.object <- 3\ncharacter.object <- \"blue\"\nvector.object1 <- c(2,3,4,5)\nvector.object2 <- c(\"blue\", \"red\", \"yellow\")\nmatrix.object <- matrix(data=vector.object1, nrow=2, ncol=2, byrow=TRUE)\n```\n:::\n\n\n\n\nNote, `c()` and `matrix()` are functions, which we will talk more about in module 2.\n\n\n## Mini Exercise\n\nTry creating one or two of these objects in your R script\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumber.object <- 3\ncharacter.object <- \"blue\"\nvector.object1 <- c(2,3,4,5)\nvector.object2 <- c(\"blue\", \"red\", \"yellow\")\nmatrix.object <- matrix(data=vector.object1, nrow=2, ncol=2, byrow=TRUE)\n```\n:::\n\n\n\n\n## Objects \n\nNote, you can find these objects now in the Global Environment.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/global_env.png){width=90%}\n:::\n:::\n\n\n\n\n\nAlso, you can call them anytime (i.e, see them in the Console) by executing (running) the object.  For example,\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncharacter.object\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"blue\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix.object\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]    2    3\n[2,]    4    5\n```\n\n\n:::\n:::\n\n\n\n\n\n## Assignment - Good coding\n\n`=` and `<-` can both be used for assignment, but `<-` is better coding practice, because `==` is a logical operator. We will talk about this more, later.\n\n## Lists\n\nList is a special data class, that can hold vectors, strings, matrices, models, list of other lists.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist.object <- list(number.object, vector.object2, matrix.object)\nlist.object\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 3\n\n[[2]]\n[1] \"blue\"   \"red\"    \"yellow\"\n\n[[3]]\n     [,1] [,2]\n[1,]    2    3\n[2,]    4    5\n```\n\n\n:::\n:::\n\n\n\n\n\n## Useful R Studio Shortcuts\n\nWill certainly save you time\n\n- `Cmd + Return` (iOS) OR `Ctrl + Enter` (Windows) in your script evaluates current line/selection\n    -   It's like copying and pasting the code into the console for it to run.\n- pressing Up/Down in the Console allows you to navigate command history\n\nSee <http://www.rstudio.com/ide/docs/using/keyboard_shortcuts> for many more\n\n\n## RStudio helps with \"tab completion\"\n\nIf you start typing a object, RStudio will show you options that you can choose without typing out the whole object.\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/tab.completion.png){width=90%}\n:::\n:::\n\n\n\n\n\n\n\n## Summary\n\n-   RStudio makes working in R easier\n-   The Editor is for static code like R Scripts\n-   The Console is for testing code that can't be saved\n-   Commenting is your new best friend\n-   In R we create objects that can be viewed in the Environment panel and called anytime\n-   An object is something that can be worked with in R\n-   Use `<-` syntax to create objects\n\n\n## Mini Exercise\n\n1. Create a new number object and name it `my.object`\n2. Create a vector of 4 numbers and name it `my.vector` using the `c()` function\n3. Add `my.object` and `my.vector` together use arithmatic operator\n\n## Acknowledgements\n\nThese are the materials I looked through, modified, or extracted to complete this module's lecture.\n\n-   [\"Introduction to R for Public Health Researchers\" Johns Hopkins University](https://jhudatascience.org/intro_to_r/)\n-   Some RStudio snapshots were pulled from <http://ayeimanol-r.net/2013/04/21/289/>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}