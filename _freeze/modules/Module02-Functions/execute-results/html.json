{
  "hash": "0531e7ec69b41ee43083c73f617056fc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Module 2: Functions\"\nformat: \n  revealjs:\n    scrollable: true\n    smaller: true\n---\n\n\n\n## Learning Objectives\n\nAfter module 2, you should be able to...\n\n-   Describe and execute functions in R\n-   Modify default behavior of functions using arguments in R\n-   Use R-specific sources of help to get more information about functions and packages \n-   Differentiate between Base R functions and functions that come from other packages\n\n\n## Function - Basic term\n\n**Function** - Functions are \"self contained\" modules of code that accomplish specific tasks. Functions usually take in some sort of object (e.g., vector, list), process it, and return a result. You can write your own, use functions that come directly from installing R (i.e., Base R functions), or use functions from external packages.\n\nA function might help you add numbers together, create a plot, or organize your data. In fact, we have already used three functions in the Module 1, including `c()`, `matrix()`, `list()`. Here is another one, `sum()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(1, 20234)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20235\n```\n\n\n:::\n:::\n\n\n\n\n## Function\n\nThe general usage for a function is the name of the function followed by parentheses. Within the parentheses are **arguments**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_name(argument1, argument2, ...)\n```\n:::\n\n\n\n\n## Arguments - Basic term\n\n**Arguments** are what you pass to the function and can include:\n\n1.  the physical object on which the function carries out a task (e.g., can be data such as a number 1 or 20234)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(1, 20234)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20235\n```\n\n\n:::\n:::\n\n\n\n2.  options that alter the way the function operates (e.g., such as the `base` argument in the function `log()`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(10, base = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n\n```{.r .cell-code}\nlog(10, base = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.321928\n```\n\n\n:::\n\n```{.r .cell-code}\nlog(10, base=exp(1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.302585\n```\n\n\n:::\n:::\n\n\n\n## Arguments\n\nMost functions are created with **default argument options**. The defaults represent standard values that the author of the function specified as being \"good enough in standard cases\". This means if you don't specify an argument when calling the function, it will use a default.\n\n-   If you want something specific, simply change the argument yourself with a value of your choice.\n-   If an argument is required but you did not specify it and there is no default argument specified when the function was created, you will receive an error.\n\n## Example\n\nWhat is the default in the `base` argument of the `log()` function?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2.302585\n```\n\n\n:::\n:::\n\n\n\n## Sure that is easy enough, but how do you know\n\n- the purpose of a function? \n- what arguments a function includes? \n- how to specify the arguments?\n\n## Seeking help for using functions\n\nThe best way of finding out this information is to use the `?` followed by the name of the function. Doing this will open up the help manual in the bottom RStudio Help panel. It provides a description of the function, usage, arguments, details, and examples. Lets look at the help file for the function `round()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?log\n```\n:::\n\n\n```\nRegistered S3 method overwritten by 'printr':\n  method                from     \n  knit_print.data.frame rmarkdown\n```\n\nLogarithms and Exponentials\n\nDescription:\n\n     'log' computes logarithms, by default natural logarithms, 'log10'\n     computes common (i.e., base 10) logarithms, and 'log2' computes\n     binary (i.e., base 2) logarithms.  The general form 'log(x, base)'\n     computes logarithms with base 'base'.\n\n     'log1p(x)' computes log(1+x) accurately also for |x| << 1.\n\n     'exp' computes the exponential function.\n\n     'expm1(x)' computes exp(x) - 1 accurately also for |x| << 1.\n\nUsage:\n\n     log(x, base = exp(1))\n     logb(x, base = exp(1))\n     log10(x)\n     log2(x)\n     \n     log1p(x)\n     \n     exp(x)\n     expm1(x)\n     \nArguments:\n\n       x: a numeric or complex vector.\n\n    base: a positive or complex number: the base with respect to which\n          logarithms are computed.  Defaults to e='exp(1)'.\n\nDetails:\n\n     All except 'logb' are generic functions: methods can be defined\n     for them individually or via the 'Math' group generic.\n\n     'log10' and 'log2' are only convenience wrappers, but logs to\n     bases 10 and 2 (whether computed _via_ 'log' or the wrappers) will\n     be computed more efficiently and accurately where supported by the\n     OS.  Methods can be set for them individually (and otherwise\n     methods for 'log' will be used).\n\n     'logb' is a wrapper for 'log' for compatibility with S.  If (S3 or\n     S4) methods are set for 'log' they will be dispatched.  Do not set\n     S4 methods on 'logb' itself.\n\n     All except 'log' are primitive functions.\n\nValue:\n\n     A vector of the same length as 'x' containing the transformed\n     values.  'log(0)' gives '-Inf', and 'log(x)' for negative values\n     of 'x' is 'NaN'.  'exp(-Inf)' is '0'.\n\n     For complex inputs to the log functions, the value is a complex\n     number with imaginary part in the range [-pi, pi]: which end of\n     the range is used might be platform-specific.\n\nS4 methods:\n\n     'exp', 'expm1', 'log', 'log10', 'log2' and 'log1p' are S4 generic\n     and are members of the 'Math' group generic.\n\n     Note that this means that the S4 generic for 'log' has a signature\n     with only one argument, 'x', but that 'base' can be passed to\n     methods (but will not be used for method selection).  On the other\n     hand, if you only set a method for the 'Math' group generic then\n     'base' argument of 'log' will be ignored for your class.\n\nSource:\n\n     'log1p' and 'expm1' may be taken from the operating system, but if\n     not available there then they are based on the Fortran subroutine\n     'dlnrel' by W. Fullerton of Los Alamos Scientific Laboratory (see\n     <https://netlib.org/slatec/fnlib/dlnrel.f>) and (for small x) a\n     single Newton step for the solution of 'log1p(y) = x'\n     respectively.\n\nReferences:\n\n     Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) _The New S\n     Language_.  Wadsworth & Brooks/Cole.  (for 'log', 'log10' and\n     'exp'.)\n\n     Chambers, J. M. (1998) _Programming with Data.  A Guide to the S\n     Language_.  Springer. (for 'logb'.)\n\nSee Also:\n\n     'Trig', 'sqrt', 'Arithmetic'.\n\nExamples:\n\n     log(exp(3))\n     log10(1e7) # = 7\n     \n     x <- 10^-(1+2*1:9)\n     cbind(deparse.level=2, # to get nice column names\n           x, log(1+x), log1p(x), exp(x)-1, expm1(x))\n\n\n\n## How to specify arguments\n\n1.  Arguments are separated with a comma\n2.  You can specify arguments by either including them in the correct order OR by assigning the argument within the function parentheses.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/log_args.png){width=70%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlog(10, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.321928\n```\n\n\n:::\n\n```{.r .cell-code}\nlog(base=2, x=10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.321928\n```\n\n\n:::\n\n```{.r .cell-code}\nlog(x=10, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.321928\n```\n\n\n:::\n\n```{.r .cell-code}\nlog(10, base=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.321928\n```\n\n\n:::\n:::\n\n\n\n## Package - Basic term\n\nWhen you download R, it has a \"base\" set of functions, that are associated with a \"base\" set of packages including: 'base', 'datasets', 'graphics', 'grDevices', 'methods', 'stats', 'methods' (typically just referred to as **Base R**).\n\n-   e.g., the `log()` function comes from the 'base' package\n\n**Package** - a package in R is a bundle or \"package\" of code (and or possibly data) that can be loaded together for easy repeated use or for **sharing** with others.\n\nPackages are analogous to software applications like Microsoft Word. After installation, your operating system allows you to use it, just like having Word installed allows you to use it.\n\n## Packages\n\nThe Packages window in RStudio can help you identify what have been installed (listed), and which one have been called (check mark).\n\nLets go look at the Packages window, find the `base` package and find the `log()` function. It automatically loads the help file that we looked at earlier using `?log`.\n\n\n## Additional Packages\n\nYou can install additional packages for your uses from [CRAN](https://cran.r-project.org/) or [GitHub](https://github.com/). These additional packages are written by RStudio or R users/developers (like us)\n\n-   Not all packages available on CRAN or GitHub are trustworthy\n-   RStudio (the company) makes a lot of great packages\n-   Who wrote it? **Hadley Wickham** is a major authority on R (Employee and Developer at RStudio)\n-   How to [trust](https://simplystatistics.org/posts/2015-11-06-how-i-decide-when-to-trust-an-r-package/#:~:text=The%20first%20thing%20I%20do,I%20immediately%20trust%20the%20package.) an R package\n\n## **Installing** and calling packages\n\nTo use the bundle or \"package\" of code (and or possibly data) from a package, you need to install and also call the package.\n\nTo install a package you can \n\n1. go to Tools ---\\> Install Packages in the RStudio header\n\nOR\n\n2. use the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(package_name)\n```\n:::\n\n\n\n\n## Installing and **calling** packages\n\nTo call (i.e., be able to use the package) you can use the following code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(package_name)\n```\n:::\n\n\n\nMore on installing and calling packages later...\n\n\n## Mini Exercise\n\nFind and execute a **Base R** function that will round the number 0.86424 to two digits.\n\n\n## Functions from Module 1\n\nThe combine function `c()` collects/combines/joins single R objects into a vector of R objects. It is mostly used for creating vectors of numbers, character strings, and other data types. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?c\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nCombine Values into a Vector or List\n\nDescription:\n\n     This is a generic function which combines its arguments.\n\n     The default method combines its arguments to form a vector.  All\n     arguments are coerced to a common type which is the type of the\n     returned value, and all attributes except names are removed.\n\nUsage:\n\n     ## S3 Generic function\n     c(...)\n     \n     ## Default S3 method:\n     c(..., recursive = FALSE, use.names = TRUE)\n     \nArguments:\n\n     ...: objects to be concatenated.  All 'NULL' entries are dropped\n          before method dispatch unless at the very beginning of the\n          argument list.\n\nrecursive: logical.  If 'recursive = TRUE', the function recursively\n          descends through lists (and pairlists) combining all their\n          elements into a vector.\n\nuse.names: logical indicating if 'names' should be preserved.\n\nDetails:\n\n     The output type is determined from the highest type of the\n     components in the hierarchy NULL < raw < logical < integer <\n     double < complex < character < list < expression.  Pairlists are\n     treated as lists, whereas non-vector components (such as 'name's /\n     'symbol's and 'call's) are treated as one-element 'list's which\n     cannot be unlisted even if 'recursive = TRUE'.\n\n     There is a 'c.factor' method which combines factors into a factor.\n\n     'c' is sometimes used for its side effect of removing attributes\n     except names, for example to turn an 'array' into a vector.\n     'as.vector' is a more intuitive way to do this, but also drops\n     names.  Note that methods other than the default are not required\n     to do this (and they will almost certainly preserve a class\n     attribute).\n\n     This is a primitive function.\n\nValue:\n\n     'NULL' or an expression or a vector of an appropriate mode.  (With\n     no arguments the value is 'NULL'.)\n\nS4 methods:\n\n     This function is S4 generic, but with argument list '(x, ...)'.\n\nReferences:\n\n     Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) _The New S\n     Language_.  Wadsworth & Brooks/Cole.\n\nSee Also:\n\n     'unlist' and 'as.vector' to produce attribute-free vectors.\n\nExamples:\n\n     c(1,7:9)\n     c(1:5, 10.5, \"next\")\n     \n     ## uses with a single argument to drop attributes\n     x <- 1:4\n     names(x) <- letters[1:4]\n     x\n     c(x)          # has names\n     as.vector(x)  # no names\n     dim(x) <- c(2,2)\n     x\n     c(x)\n     as.vector(x)\n     \n     ## append to a list:\n     ll <- list(A = 1, c = \"C\")\n     ## do *not* use\n     c(ll, d = 1:3) # which is == c(ll, as.list(c(d = 1:3)))\n     ## but rather\n     c(ll, d = list(1:3))  # c() combining two lists\n     \n     c(list(A = c(B = 1)), recursive = TRUE)\n     \n     c(options(), recursive = TRUE)\n     c(list(A = c(B = 1, C = 2), B = c(E = 7)), recursive = TRUE)\n```\n\n\n:::\n:::\n\n\n\n## Functions from Module 1\n\nThe `matrix()` function creates a matrix from the given set of values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?matrix\n```\n:::\n\n\n\nxxamy - doesn't seem to work - may need to paste in a screen shot figure\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nNo documentation for 'matix' in specified packages and libraries\n```\n\n\n:::\n:::\n\n\n\n\n## Summary\n\n- Functions are \"self contained\" modules of code that accomplish specific tasks.\n- Arguments are what you pass to functions (e.g., objects on which you carry out the task or options for how to carry out the task)\n- Arguments may include defaults that the author of the function specified as being \"good enough in standard cases\", but that can be changed.\n- An R Package is a bundle or \"package\" of code (and or possibly data) that can be used by installing it once and calling it (using `library()`) each time R/Rstudio is opened\n- The Help window in RStudio is useful for to get more information about functions and packages \n\n\n## Acknowledgements\n\nThese are the materials I looked through, modified, or extracted to complete this module's lecture.\n\n- [\"Introduction to R - ARCHIVED\" from  Harvard Chan Bioinformatics Core (HBC)](https://hbctraining.github.io/Intro-to-R/lessons/03_introR-functions-and-arguments.html#:\\~:text=A%20key%20feature%20of%20R,it%2C%20and%20return%20a%20result.)\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}