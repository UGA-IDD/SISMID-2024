---
title: "Module 7: Variable Creation, Classes, and Summaries"
format:
  revealjs:
    smaller: true
    scrollable: true
    toc: false
---

## Learning Objectives

After module 7, you should be able to...

-   Create new variables
-   Characterize variable classes
-   Manipulate the classes of variables
-   Conduct 1 variable data summaries

## Import data for this module
Let's first read in the data from the previous module and look at it briefly with a new function `head()`. `head()` allows us to look at the first `n` observations.


```{r, out.width = "100%", echo = FALSE, fig.align='left'}
knitr::include_graphics("images/head_args.png")
```

```{r echo=TRUE}
df <- read.csv(file = "data/serodata.csv") #relative path
head(x=df, n=3)
```


## Adding new columns with `$` operator

You can add a new column, called `log_IgG` to `df`, using the `$` operator:
```{r echo=TRUE}
df$log_IgG <- log(df$IgG_concentration)
head(df,3)
```

Note, my use of the underscore in the variable name rather than a space.  This is good coding practice and make calling variables much less prone to error.

## Adding new columns with `transform()`

We can also add a new column using the `transform()` function:

```{r, echo = TRUE, eval=FALSE}
?transform
```

```{r, echo = FALSE}
library(printr)
?transform
```

## Adding new columns with `transform()`

For example, adding a binary column for seropositivity called `seropos`:

```{r}
df <- transform(df, seropos = IgG_concentration >= 10)
head(df)
```


## Creating conditional variables

One frequently used tool is creating variables with conditions. A general function for creating new variables based on existing variables is the Base R `ifelse()` function, which "returns a value depending on whether the element of test is `TRUE` or `FALSE`."

```{r, echo = TRUE, eval=FALSE}
?ifelse
```

```{r, echo = FALSE, results = "asis"}
library(printr)
?ifelse
```


## `ifelse` example

Reminder of the first three arguments in the `ifelse()` function are `ifelse(test, yes, no)`.

```{r echo=TRUE}
df$age_group <- ifelse(df$age <= 5, "young", "old")
head(df)
```

## `ifelse` example
Let's delve into what is actually happening, with a focus on the NA values in `age` variable.

```{r echo=TRUE, eval=FALSE}
df$age_group <- ifelse(df$age <= 5, "young", "old")
```

```{r echo=TRUE}
df$age <= 5
```

## Nesting two `ifelse` statements example

`ifelse(test1, yes_to_test1, ifelse(test2, no_to_test2_yes_to_test2, no_to_test1_no_to_test2))`.

```{r echo=TRUE}
df$age_group <- ifelse(df$age <= 5, "young", 
                       ifelse(df$age<=10 & df$age>5, "middle", "old"))
```

Let's use the `table()` function to check if it worked.
```{r echo=TRUE, eval=TRUE}
table(df$age, df$age_group, useNA="always", dnn=list("age", ""))
```

Note, it puts the variable levels in alphabetical order, we will show how to change this later.

# Data Classes

## Overview - Data Classes

1. One dimensional types (i.e., vectors of characters, numeric, logical, or factor values)

2. Two dimensional types (e.g., matrix, data frame, tibble)

3. Special data classes (e.g., lists, dates). 

## 	`class()` function

The `class()` function allows you to evaluate the class of an object.

```{r echo=TRUE}
class(df$IgG_concentration)
class(df$age)
class(df$gender)
```


## One dimensional data types

* Character: strings or individual characters, quoted
* Numeric: any real number(s)
    - Double: contains fractional values (i.e., double precision) - default numeric
    - Integer: any integer(s)/whole numbers
* Logical: variables composed of TRUE or FALSE
* Factor: categorical/qualitative variables

## Character and numeric

This can also be a bit tricky. 

If only one character in the whole vector, the class is assumed to be character
```{r echo=TRUE}
class(c(1, 2, "tree")) 
```

Here because integers are in quotations, it is read as a character class by R.
```{r echo=TRUE}
class(c("1", "4", "7")) 
```

Note, instead of creating a new vector object (e.g., `x <- c("1", "4", "7")`) and then feeding the vector object `x` into the first argument of the `class()` function (e.g., `class(x)`), we combined the two steps and directly fed a vector object into the class function.

## Numeric Subclasses

There are two major numeric subclasses

1. `Double` is a special subset of `numeric` that contains <span style="color: red;">fractional values</span>. `Double` stands for [double-precision](https://en.wikipedia.org/wiki/Double-precision_floating-point_format)
2. `Integer` is a special subset of `numeric` that contains only <span style="color: red;">whole numbers</span>. 

`typeof()` identifies the vector type (double, integer, logical, or character), whereas `class()` identifies the root class. The difference between the two will be more clear when we look at two dimensional classes below.


```{r echo=TRUE}
class(df$IgG_concentration)
class(df$age)
typeof(df$IgG_concentration)
typeof(df$age)
```


## Logical

Reminder `logical` is a type that only has three possible elements: `TRUE` and `FALSE` and `NA`

```{r echo=TRUE}
class(c(TRUE, FALSE, TRUE, TRUE, FALSE))
```

Note that when creating `logical` object the `TRUE` and `FALSE` are NOT in quotes. Putting R special classes (e.g., `NA` or `FALSE`) in quotations turns them into character value. 


## Other useful functions for evaluating/setting classes

There are two useful functions associated with practically all R classes: 

- `is.CLASS_NAME(x)` to **logically check** whether or not `x` is of certain  class.  For example,  `is.integer` or `is.character` or `is.numeric`
- `as.CLASS_NAME(x)` to **coerce between classes** `x` from current `x` class into a another class. For example, `as.integer` or `as.character` or `as.numeric`.  This is particularly useful is maybe integer variable was read in as a character variable, or when you need to change a character variable to a factor variable (more on this later).

## Examples `is.CLASS_NAME(x)`

```{r echo=TRUE}
is.numeric(df$IgG_concentration)
is.character(df$age)
is.character(df$gender)
```

## Examples `as.CLASS_NAME(x)`

In some cases, coercing is seamless
```{r echo=TRUE}
as.character(c(1, 4, 7))
as.numeric(c("1", "4", "7"))
as.logical(c("TRUE", "FALSE", "FALSE"))
```

In some cases the coercing is not possible; if executed, will return `NA`
```{r echo=TRUE}
as.numeric(c("1", "4", "7a"))
as.logical(c("TRUE", "FALSE", "UNKNOWN"))
```


## Factors

A `factor` is a special `character` vector where the elements have pre-defined groups or 'levels'. You can think of these as qualitative or categorical variables. Use the `factor()` function to create factors from character values. 

```{r echo=TRUE}
class(df$age_group)
df$age_group_factor <- factor(df$age_group)
class(df$age_group_factor)
levels(df$age_group_factor)
```

Note 1, that levels are, by default, set to **alphanumerical** order! And, the first is always the "reference" group. However, we often prefer a different reference group.

Note 2, we can also make ordered factors using `factor(... ordered=TRUE)`, but we won't talk more about that.

## Reference Groups 

**Why do we care about reference groups?** 

Generalized linear regression allows you to compare the outcome of two or more groups. Your reference group is the group that everything else is compared to. Say we want to assess whether being <5 years old is associated with higher IgG antibody concentrations 

By default `middle` is the reference group therefore we will only generate beta coefficients comparing `middle` to `young` AND `middle` to `old`.  But, we want `young` to be the reference group so we will generate beta coefficients comparing `young` to `middle` AND `young` to `old`.

## Changing factor reference 

Changing the reference group of a factor variable.

- If the object is already a factor then use `relevel()` function and the `ref` argument to specify the reference.
- If the object is a character then use `factor()` function and `levels` argument to specify the order of the values, the first being the reference.


Let's look at the `relevel()` help file
```{r, echo = FALSE, results = "asis"}
library(printr)
?relevel
```

</br>

Let's look at the `factor()` help file
```{r, echo = FALSE, results = "asis"}
library(printr)
?factor
```


## Changing factor reference examples

```{r echo=TRUE}
df$age_group_factor <- relevel(df$age_group_factor, ref="young")
levels(df$age_group_factor)
```

OR

```{r echo=TRUE}
df$age_group_factor <- factor(df$age_group, levels=c("young", "middle", "old"))
levels(df$age_group_factor)
```

Arranging, tabulating, and plotting the data will reflect the new order


## Two-dimensional data classes

Two-dimensional classes are those we would often use to store data read from a file 

* a matrix (`matrix` class)
* a data frame (`data.frame` or `tibble` classes)


## Matrices

Matrices, like data frames are also composed of rows and columns. Matrices, unlike `data.frame`, the entire matrix is composed of one R class. **For example: all entries are `numeric`, or all entries are `character`**

`as.matrix()` creates a matrix from a data frame (where all values are the same class). As a reminder, here is the matrix signature function to help remind us how to build a matrix

```
matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL)
```

```{r echo=TRUE}
matrix(data=1:6, ncol = 2) 
matrix(data=1:6, ncol=2, byrow=TRUE) 
```

Note, the first matrix filled in numbers 1-6 by columns first and then rows because default `byrow` argument is FALSE. In the second matrix, we changed the argument `byrow` to `TRUE`, and now numbers 1-6 are filled by rows first and then columns.

## Data frame 

You can transform an existing matrix into data frames using `as.data.frame()`  

```{r echo=TRUE}
as.data.frame(matrix(1:6, ncol = 2) ) 
```


## Numeric variable data summary

Data summarization on numeric vectors/variables:

-	`mean()`: takes the mean of x
-	`sd()`: takes the standard deviation of x
-	`median()`: takes the median of x
-	`quantile()`: displays sample quantiles of x. Default is min, IQR, max
-	`range()`: displays the range. Same as `c(min(), max())`
-	`sum()`: sum of x
-	`max()`: maximum value in x
-	`min()`: minimum value in x
- `colSums()`: get the columns sums of a data frame
- `rowSums()`: get the row sums of a data frame
- `colMeans()`: get the columns means of a data frame
- `rowMeans`()`: get the row means of a data frame

Note, the top 8 functions have an `na.rm` **argument for missing data**

## Numeric variable data summary

Let's look at a help file for `mean()` to make note of the `na.rm` argument

```{r, echo = TRUE, eval=FALSE}
?range
```


```{r, echo = FALSE, results = "asis"}
library(printr)
?range
```

## Numeric variable data summary examples

```{r echo=TRUE}
summary(df)
range(df$age)
range(df$age, na.rm=TRUE)
median(df$IgG_concentration, na.rm=TRUE)
```


## Character variable data summaries

Data summarization on character or factor vectors/variables using `table()`

		
```{r, echo = TRUE, eval=FALSE}
?table
```

		
```{r, echo = FALSE, results = "asis"}
library(printr)
?table
```


## Character variable data summary examples

Number of observations in each category

```{r echo=TRUE}
table(df$gender)
table(df$gender, useNA="always")
table(df$age_group, useNA="always")
```

```{r echo=TRUE}
table(df$gender)/nrow(df) #if no NA values
table(df$age_group)/nrow(df[!is.na(df$age_group),]) #if there are NA values
table(df$age_group)/nrow(subset(df, !is.na(df$age_group),)) #if there are NA values
```


## Summary

- You can create new columns/variable to a data frame by using `$`  or the `transform()` function
- One useful function for creating new variables based on existing variables is the `ifelse()` function, which returns a value depending on whether the element of test is `TRUE` or `FALSE`
- The `class()` function allows you to evaluate the class of an object.
-  There are two types of numeric class objects: integer and double
-  Logical class objects only have `TRUE` or `False` (without quotes)
-  `is.CLASS_NAME(x)` can be used to test the class of an object x
-  `as.CLASS_NAME(x)` can be used to change the class of an object x
-  Factors are a special character class that has levels 
- There are many fairly intuitive data summary functions you can perform on a vector (i.e., `mean()`, `sd()`, `range()`) or on rows or columns of a data frame (i.e., `colSums()`, `colMeans()`, `rowSums()`)
- The `table()` function builds frequency tables of the counts at each combination of categorical levels

## Acknowledgements

These are the materials we looked through, modified, or extracted to complete this module's lecture.

-   ["Introduction to R for Public Health Researchers" Johns Hopkins University](https://jhudatascience.org/intro_to_r/)

