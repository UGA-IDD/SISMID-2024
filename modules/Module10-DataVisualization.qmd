---
title: "Module 10: Data Visualization"
format: 
  revealjs:
    scrollable: true
    smaller: true
    toc: false
---

## Learning Objectives

After module 10, you should be able to:

- Create Base R plots

## Import data for this module

Let's read in our data (again) and take a quick look.

```{r, echo=TRUE}
df <- read.csv(file = "data/serodata.csv") #relative path
head(x=df, n=3)
```

## Prep data

Create `age_group` three level factor variable
```{r echo=TRUE}
df$age_group <- ifelse(df$age <= 5, "young", 
                       ifelse(df$age<=10 & df$age>5, "middle", "old")) 
df$age_group <- factor(df$age_group, levels=c("young", "middle", "old"))
```

Create `seropos` binary variable representing seropositivity if antibody concentrations are >10 IU/mL.
```{r echo=TRUE}
df$seropos <- ifelse(df$IgG_concentration<10, 0, 1)
```

## Base R data visualizattion functions

The Base R 'graphics' package has a ton of graphics options. 

```{r echo=TRUE, eval=FALSE}
help(package = "graphics")
```

```{r echo=FALSE, eval=TRUE}
library(printr)
help(package = "graphics")
```



## Base R Plotting

To make a plot you often need to specify the following features:

1. Parameters
2. Plot attributes
3. The legend

## 1. Parameters

The parameter section fixes the settings for all your plots, basically the plot options. Adding attributes via `par()` before you call the plot creates ‘global’ settings for your plot.

In the example below, we have set two commonly used optional attributes in the global plot settings.

-	The `mfrow` specifies that we have one row and two columns of plots — that is, two plots side by side. 
-	The `mar` attribute is a vector of our margin widths, with the first value indicating the margin below the plot (5), the second indicating the margin to the left of the plot (5), the third, the top of the plot(4), and the fourth to the left (1).

```
par(mfrow = c(1,2), mar = c(5,5,4,1))
```


## 1. Parameters

```{r, figwidth = "100%", echo = FALSE}
knitr::include_graphics("images/par.png")
```


## Lots of parameters options

However, there are many more parameter options that can be specified in the 'global' settings or specific to a certain plot option. 

```{r echo=TRUE, eval=FALSE}
?par
```

```{r, echo = FALSE, results = "asis"}
library(printr)
?par
```

## Common parameter options

Eight useful parameter arguments help improve the readability of the plot:

- `xlab`: specifies the x-axis label of the plot
- `ylab`: specifies the y-axis label
- `main`: titles your graph
- `pch`: specifies the symbology of your graph
- `lty`: specifies the line type of your graph
- `lwd`: specifies line thickness
-	`cex` : specifies size
- `col`: specifies the colors for your graph.

We will explore use of these arguments below.

## Common parameter options

```{r, out.width = "200%", echo = FALSE}
knitr::include_graphics("images/atrributes.png")
```


## 2. Plot Attributes

Plot attributes are those that map your data to the plot. This mean this is where you specify what variables in the data frame you want to plot. 

We will only look at four types of plots today:

- `hist()` displays histogram of one variable
- `plot()` displays x-y plot of two variables
- `boxplot()` displays boxplot 
- `barplot()` displays barplot


## `hist()` Help File

```{r echo=TRUE, eval=FALSE}
?hist
```

```{r, echo = FALSE, results = "asis"}
library(printr)
?hist
```

## `hist()` example

Reminder function signature
```
hist(x, breaks = "Sturges",
     freq = NULL, probability = !freq,
     include.lowest = TRUE, right = TRUE, fuzz = 1e-7,
     density = NULL, angle = 45, col = "lightgray", border = NULL,
     main = paste("Histogram of" , xname),
     xlim = range(breaks), ylim = NULL,
     xlab = xname, ylab,
     axes = TRUE, plot = TRUE, labels = FALSE,
     nclass = NULL, warn.unused = TRUE, ...)
```

Let's practice
```{r echo=TRUE}
hist(df$age)
hist(
	df$age, 
	freq=FALSE, 
	main="Histogram", 
	xlab="Age (years)"
	)
```


## `plot()` Help File

```{r echo=TRUE, eval=FALSE}
?plot
```


```{r, echo = FALSE, results = "asis"}
library(printr)
help(plot, package="base")
```


## `plot()` example


```{r echo=TRUE}
plot(df$age, df$IgG_concentration)
plot(
	df$age, 
	df$IgG_concentration, 
	type="p", 
	main="Age by IgG Concentrations", 
	xlab="Age (years)", 
	ylab="IgG Concentration (IU/mL)", 
	pch=16, 
	cex=0.9,
	col="lightblue")
```

## Adding more stuff to the same plot

* We can use the functions `points()` or `lines()` to add additional points
or additional lines to an existing plot.

```{r eval=TRUE, echo=TRUE}
plot(
	df$age[df$slum == "Non slum"],
	df$IgG_concentration[df$slum == "Non slum"],
	type = "p",
	main = "IgG Concentration vs Age",
	xlab = "Age (years)",
	ylab = "IgG Concentration (IU/mL)",
	pch = 16,
	cex = 0.9,
	col = "lightblue",
	xlim = range(df$age, na.rm = TRUE),
	ylim = range(df$IgG_concentration, na.rm = TRUE)
)
points(
	df$age[df$slum == "Mixed"],
	df$IgG_concentration[df$slum == "Mixed"],
	pch = 16,
	cex = 0.9,
	col = "blue"
)
points(
	df$age[df$slum == "Slum"],
	df$IgG_concentration[df$slum == "Slum"],
	pch = 16,
	cex = 0.9,
	col = "darkblue"
)
```

* The `lines()` function works similarly for connected lines.
* Note that the `points()` or `lines()` functions must be called with a `plot()`-style function
* We will show how we could draw a `legend()` in a future section.


## `boxplot()` Help File


```{r echo=TRUE, eval=FALSE}
?boxplot
```

```{r, echo = FALSE, results = "asis"}
library(printr)
?boxplot
```


## `boxplot()` example

Reminder function signature
```
boxplot(formula, data = NULL, ..., subset, na.action = NULL,
        xlab = mklab(y_var = horizontal),
        ylab = mklab(y_var =!horizontal),
        add = FALSE, ann = !add, horizontal = FALSE,
        drop = FALSE, sep = ".", lex.order = FALSE)
```

Let's practice
```{r echo=TRUE}
boxplot(IgG_concentration~age_group, data=df)
boxplot(
	log(df$IgG_concentration)~df$age_group, 
	main="Age by IgG Concentrations", 
	xlab="Age Group (years)", 
	ylab="log IgG Concentration (mIU/mL)", 
	names=c("1-5","6-10", "11-15"), 
	varwidth=T
	)
```


## `barplot()` Help File

```{r echo=TRUE, eval=FALSE}
?barplot
```

```{r, echo = FALSE, results = "asis"}
library(printr)
?barplot
```


## `barplot()` example

The function takes the a lot of arguments to control the way the way our data is plotted. 

Reminder function signature
```
barplot(height, width = 1, space = NULL,
        names.arg = NULL, legend.text = NULL, beside = FALSE,
        horiz = FALSE, density = NULL, angle = 45,
        col = NULL, border = par("fg"),
        main = NULL, sub = NULL, xlab = NULL, ylab = NULL,
        xlim = NULL, ylim = NULL, xpd = TRUE, log = "",
        axes = TRUE, axisnames = TRUE,
        cex.axis = par("cex.axis"), cex.names = par("cex.axis"),
        inside = TRUE, plot = TRUE, axis.lty = 0, offset = 0,
        add = FALSE, ann = !add && par("ann"), args.legend = NULL, ...)
```

```{r echo=TRUE}
freq <- table(df$seropos, df$age_group)
barplot(freq)
prop.cell.percentages <- prop.table(freq)
barplot(prop.cell.percentages)
```

## 3. Legend!

In Base R plotting the legend is not automatically generated.  This is nice because it gives you a huge amount of control over how your legend looks, but it is also easy to mislabel your colors, symbols, line types, etc. So, basically be careful.

```{r echo=TRUE, eval=FALSE}
?legend
```

```{r echo=FALSE, eval=TRUE}
library(printr)
?legend
```



## Add legend to the plot

Reminder function signature
```
legend(x, y = NULL, legend, fill = NULL, col = par("col"),
       border = "black", lty, lwd, pch,
       angle = 45, density = NULL, bty = "o", bg = par("bg"),
       box.lwd = par("lwd"), box.lty = par("lty"), box.col = par("fg"),
       pt.bg = NA, cex = 1, pt.cex = cex, pt.lwd = lwd,
       xjust = 0, yjust = 1, x.intersp = 1, y.intersp = 1,
       adj = c(0, 0.5), text.width = NULL, text.col = par("col"),
       text.font = NULL, merge = do.lines && has.pch, trace = FALSE,
       plot = TRUE, ncol = 1, horiz = FALSE, title = NULL,
       inset = 0, xpd, title.col = text.col[1], title.adj = 0.5,
       title.cex = cex[1], title.font = text.font[1],
       seg.len = 2)
```

Let's practice
```{r echo=TRUE, eval=FALSE}
barplot(prop.cell.percentages, col=c("darkblue","red"), ylim=c(0,0.5), main="Seropositivity by Age Group")
legend(x=2.5, y=0.5,
			 fill=c("darkblue","red"), 
			 legend = c("seronegative", "seropositive"))

```


## Add legend to the plot

```{r echo=FALSE}
barplot(prop.cell.percentages, col=c("darkblue","red"), ylim=c(0,0.5), main="Seropositivity by Age Group")
legend(x=2.5, y=0.5,
			 fill=c("darkblue","red"), 
			 legend = c("seronegative", "seropositive"))

```


## `barplot()` example

Getting closer, but what I really want is column proportions (i.e., the proportions should sum to one for each age group). Also, the age groups need more meaningful names.

```{r echo=TRUE, eval=FALSE}
freq <- table(df$seropos, df$age_group)
prop.column.percentages <- prop.table(freq, margin=2)
colnames(prop.column.percentages) <- c("1-5 yo", "6-10 yo", "11-15 yo")

barplot(prop.column.percentages, col=c("darkblue","red"), ylim=c(0,1.35), main="Seropositivity by Age Group")
axis(2, at = c(0.2, 0.4, 0.6, 0.8,1))
legend(x=2.8, y=1.35,
			 fill=c("darkblue","red"), 
			 legend = c("seronegative", "seropositive"))

```

## `barplot()` example

```{r echo=FALSE, eval=TRUE}
freq <- table(df$seropos, df$age_group)
prop.column.percentages <- prop.table(freq, margin=2)
colnames(prop.column.percentages) <- c("1-5 yo", "6-10 yo", "11-15 yo")

barplot(prop.column.percentages, col=c("darkblue","red"), ylim=c(0,1.35), main="Seropositivity by Age Group")
axis(2, at = c(0.2, 0.4, 0.6, 0.8,1))
legend(x=2.8, y=1.35,
			 fill=c("darkblue","red"), 
			 legend = c("seronegative", "seropositive"))

```



## `barplot()` example

Now, let look at seropositivity by two individual level characteristics in the same plot. 

```{r echo=FALSE}
freq2 <- table(df$seropos, df$slum)
prop.column.percentages2 <- prop.table(freq2, margin=2)
```

```{r echo=TRUE, eval=FALSE}
par(mfrow = c(1,2))
barplot(prop.column.percentages, col=c("darkblue","red"), ylim=c(0,1.35), main="Seropositivity by Age Group")
axis(2, at = c(0.2, 0.4, 0.6, 0.8,1))
legend("topright",
			 fill=c("darkblue","red"), 
			 legend = c("seronegative", "seropositive"))

barplot(prop.column.percentages2, col=c("darkblue","red"), ylim=c(0,1.35), main="Seropositivity by Residence")
axis(2, at = c(0.2, 0.4, 0.6, 0.8,1))
legend("topright", fill=c("darkblue","red"),  legend = c("seronegative", "seropositive"))
```


## `barplot()` example

```{r echo=FALSE, eval=TRUE}
par(mfrow = c(1,2))
barplot(prop.column.percentages, col=c("darkblue","red"), ylim=c(0,1.35), main="Seropositivity by Age Group")
axis(2, at = c(0.2, 0.4, 0.6, 0.8,1))
legend("topright",
			 fill=c("darkblue","red"), 
			 legend = c("seronegative", "seropositive"))

barplot(prop.column.percentages2, col=c("darkblue","red"), ylim=c(0,1.35), main="Seropositivity by Residence")
axis(2, at = c(0.2, 0.4, 0.6, 0.8,1))
legend("topright", fill=c("darkblue","red"),  legend = c("seronegative", "seropositive"))
```

## Saving plots to file

If you want to include your graphic in a paper or anything else, you need to
save it as an image. One limitation of base R graphics is that the process for
saving plots is a bit annoying.

1. Open a graphics device connection with a graphics function -- examples
include `pdf()`, `png()`, and `tiff()` for the most useful.
1. Run the code that creates your plot.
1. Use `dev.off()` to close the graphics device connection.

Let's do an example.

```{r}
# Open the graphics device
png(
	"my-barplot.png",
	width = 800,
	height = 450,
	units = "px"
)
# Set the plot layout -- this is an alternative to par(mfrow = ...)
layout(matrix(c(1, 2), ncol = 2))
# Make the plot
barplot(prop.column.percentages, col=c("darkblue","red"), ylim=c(0,1.35), main="Seropositivity by Age Group")
axis(2, at = c(0.2, 0.4, 0.6, 0.8,1))
legend("topright",
			 fill=c("darkblue","red"), 
			 legend = c("seronegative", "seropositive"))

barplot(prop.column.percentages2, col=c("darkblue","red"), ylim=c(0,1.35), main="Seropositivity by Residence")
axis(2, at = c(0.2, 0.4, 0.6, 0.8,1))
legend("topright", fill=c("darkblue","red"),  legend = c("seronegative", "seropositive"))
# Close the graphics device
dev.off()
# Reset the layout
layout(1)
```

Note: after you do an interactive graphics session, it is often helpful to
restart R or run the function `graphics.off()` before opening the graphics
connection device.

## Base R plots vs the Tidyverse ggplot2 package

It is good to know both b/c they each have their strengths

## Summary

- the Base R 'graphics' package has a ton of graphics options that allow for ultimate flexibility
- Base R plots typically include setting plot options (`par()`), mapping data to the plot (e.g., `plot()`, `barplot()`, `points()`, `lines()`), and creating a legend (`legend()`). 
- the functions `points()` or `lines()` add additional points or additional lines to an existing plot, but must be called with a `plot()`-style function
- in Base R plotting the legend is not automatically generated, so be careful when creating it


## Acknowledgements

These are the materials we looked through, modified, or extracted to complete this module's lecture.

-   ["Base Plotting in R" by Medium](https://towardsdatascience.com/base-plotting-in-r-eb365da06b22)
-		["Base R margins: a cheatsheet"](https://r-graph-gallery.com/74-margin-and-oma-cheatsheet.html)
