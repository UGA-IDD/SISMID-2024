---
title: "Module 6: Get to Know Your Data and Subsetting"
format: 
  revealjs:
    scrollable: true
    smaller: true
    toc: false
#execute: 
#  echo: true
---

## Learning Objectives

After module 6, you should be able to...

-   Use basic functions to get to know you data
-   Use three indexing approaches
-   Rely on indexing to extract part of an object (e.g., subset data) and to replace parts of an object (e.g., rename variables / columns)
-   Describe what logical operators are and how to use them
-   Use on the `subset()` function to subset data


## Getting to know our data

The `dim()`, `nrow()`, and `ncol()` functions are good options to check the dimensions of your data before moving forward. 

Let's first read in the data from the previous module.

```{r echo=TRUE}
df <- read.csv(file = "data/serodata.csv") #relative path
```

```{r echo=TRUE}
dim(df) # rows, columns
nrow(df) # number of rows
ncol(df) # number of columns
```

## Quick summary of data

The `colnames()`, `str()` and `summary()`functions from Base R are great functions to assess the data type and some summary statistics.    

```{r echo=T}
colnames(df)
str(df)
summary(df)
```

Note, if you have a very large dataset with 15+ variables, `summary()` is not so efficient. 

## Description of data

This is data based on a simulated pathogen X IgG antibody serological survey.  The rows represent individuals. Variables include IgG concentrations in IU/mL, age in years, gender, and residence based on slum characterization.  We will use this dataset for modules throughout the Workshop.

## View the data as a whole dataframe

The `View()` function, one of the few Base R functions with a capital letter, and can be used to open a new tab in the Console and view the data as you would in excel.

```{r echo=TRUE, eval=FALSE}
View(df)
```

```{r, out.width = "100%", echo = FALSE}
knitr::include_graphics("images/ViewTab.png")
```

## View the data as a whole dataframe

You can also open a new tab of the data by clicking on the data icon beside the object in the Environment pane

```{r, out.width = "90%", echo = FALSE}
knitr::include_graphics("images/View.png")
```

You can also hold down `Cmd` or `CTRL` and click on the name of a data frame in your code.

## Indexing

R contains several operators which allow access to individual elements or subsets through indexing. Indexing can be used both to extract part of an object and to replace parts of an object (or to add parts). There are three basic indexing operators: `[`, `[[` and `$`. 

```{r echo=TRUE, eval=FALSE}
x[i] #if x is a vector
x[i, j] #if x is a matrix/data frame
x[[i]] #if x is a list
x$a #if x is a data frame or list
x$"a" #if x is a data frame or list
```

## Vectors and multi-dimensional objects

To index a vector, `vector[i]` select the ith element. To index a multi-dimensional objects such as a matrix, `matrix[i, j]` selects the element in row i and column j, where as in a three dimensional `array[k, i, j]` selects the element in matrix k, row i, and column j. 

Let's practice by first creating the same objects as we did in Module 1.
```{r echo=T}
number.object <- 3
character.object <- "blue"
vector.object1 <- c(2,3,4,5)
vector.object2 <- c("blue", "red", "yellow")
matrix.object <- matrix(data=vector.object1, nrow=2, ncol=2, byrow=TRUE)
```

Here is a reminder of what these objects look like.
```{r echo=T}
vector.object1
matrix.object
```

Finally, let's use indexing to pull out elements of the objects.  
```{r echo=T}
vector.object1[2] #pulling the second element
matrix.object[1,2] #pulling the element in row 1 column 2
```


## List objects

For lists, one generally uses `list[[p]]` to select any single element p.

Let's practice by creating the same list as we did in Module 1.
```{r echo=TRUE}
list.object <- list(number.object, vector.object2, matrix.object)
list.object
```

Now we use indexing to pull out the 3rd element in the list.
```{r echo=T}
list.object[[3]]
```

What happens if we use a single square bracket?
```{r echo=T}
list.object[3]
```

The `[[` operator is called the "extract" operator and gives us the element
from the list. The `[` operator is called the "subset" operator and gives
us a subset of the list, that is still a list.

## $ for indexing for data frame

`$` allows only a literal character string or a symbol as the index.  For a data frame it extracts a variable.

```{r echo=T, eval=FALSE}
df$IgG_concentration
```

Note, if you have spaces in your variable name, you will need to use back ticks \` after the `$`.  This is a good reason to not create variables / column names with spaces.

## $ for indexing with lists

`$` allows only a literal character string or a symbol as the index.  For a list it extracts a named element.

List elements can be named
```{r echo=TRUE}
list.object.named <- list(
  emory = number.object,
  uga = vector.object2,
  gsu = matrix.object
)
list.object.named
```

If list elements are named, than you can reference data from list using `$` or using double square brackets, `[[`
```{r echo=TRUE}
list.object.named$uga 
list.object.named[["uga"]] 
```


## Using indexing to rename columns

As mentioned above, indexing can be used both to extract part of an object and to replace parts of an object (or to add parts).

```{r echo=TRUE}
colnames(df) 
colnames(df)[2:3] <- c("IgG_concentration_IU/mL", "age_year") # reassigns
colnames(df)
```

For the sake of the module, I am going to reassign them back to the original variable names
```{r echo=TRUE}
colnames(df)[2:3] <- c("IgG_concentration", "age") #reset
```

##  Using indexing to subset by columns

We can also subset data frames and matrices (2-dimensional objects) using the bracket `[ row , column ]`.  We can subset by columns and pull the `x` column using the index of the column or the column name. Leaving either row or column dimension blank means to select all of them.

For example, here I am pulling the 3rd column, which has the variable name `age`, for all of rows.
```{r echo=T, eval=FALSE}
df[ , "age"] #same as df[ , 3]
```
We can select multiple columns using multiple column names, again this is selecting these variables for all of the rows.
```{r echo=T}
df[, c("age", "gender")] #same as df[ , c(3,4)]
```
We can remove select columns using indexing as well, OR by simply changing the column to `NULL`
```{r echo=T, eval=FALSE}
df[, -5] #remove column 5, "slum" variable
```
```{r echo=TRUE, eval=FALSE}
df$slum <- NULL # this is the same as above
```
We can also grab the `age` column using the `$` operator, again this is selecting the variable for all of the rows.
```{r echo=T, eval=FALSE}
df$age
```


##  Using indexing to subset by rows

We can use indexing to also subset by rows. For example, here we pull the 100th observation/row.
```{r echo=T}
df[100,] 
```
And, here we pull the `age` of the 100th observation/row.
```{r echo=T}
df[100,"age"] 
```
 

## Logical operators

Logical operators can be evaluated on object(s) in order to return a binary response of TRUE/FALSE

operator | operator option |description
-----|-----|-----:
`<`|%l%|less than
`<=`|%le%|less than or equal to
`>`|%g%|greater than
`>=`|%ge%|greater than or equal to
`==`||equal to
`!=`||not equal to
`x&y`||x and y
`x|y`||x or y
`%in%`||match
`%!in%`||do not match


## Logical operators examples

Let's practice.  First, here is a reminder of what the number.object contains.
```{r echo=TRUE}
number.object
```

Now, we will use logical operators to evaluate the object.
```{r echo=TRUE}
number.object<4
number.object>=3
number.object!=5
number.object %in% c(6,7,2)
```


## Using indexing and logical operators to rename columns

1. We can assign the column names from data frame `df` to an object `cn`, then we can modify `cn` directly using indexing and logical operators, finally we reassign the column names, `cn`, back to the data frame `df`:

```{r echo=TRUE}
cn <- colnames(df)
cn
cn=="IgG_concentration"
cn[cn=="IgG_concentration"] <-"IgG_concentration_mIU" #rename cn to "IgG_concentration_mIU" when cn is "IgG_concentration"
colnames(df) <- cn
colnames(df)
```

Note, I am resetting the column name back to the original name for the sake of the rest of the module.
```{r echo=TRUE}
colnames(df)[colnames(df)=="IgG_concentration_mIU"] <- "IgG_concentration" #reset
```


##  Using indexing and logical operators to subset data


In this example, we subset by rows and pull only observations with an age of less than or equal to 10 and then saved the subset data to `df_lt10`. Note that the logical operators `df$age<=10` is before the comma because I want to subset by rows (the first dimension).
```{r echo=T}
df_lte10 <- df[df$age<=10, ]
```
Lets check that my subsets worked using the `summary()` function. 
```{r echo=T}
summary(df_lte10$age)
```

</br>

In the next example, we subset by rows and pull only observations with an age of less than or equal to 5 OR greater than 10.
```{r echo=TRUE}
df_lte5_gt10 <- df[df$age<=5 | df$age>10, ]
```
Lets check that my subsets worked using the `summary()` function. 
```{r echo=T}
summary(df_lte5_gt10$age)
```


## Missing values 

Missing data need to be carefully described and dealt with in data analysis. Understanding the different types of missing data and how you can identify them, is the first step to data cleaning.

Types of "missing" values:

- `NA` - **N**ot **A**pplicable general missing data
- `NaN` - stands for "**N**ot **a** **N**umber", happens when you do 0/0.
- `Inf` and `-Inf` - Infinity, happens when you divide a positive number (or negative number) by 0.
- blank space - sometimes when data is read it, there is a blank space left
- an empty string (e.g., `""`) 
- `NULL`- undefined value that represents something that does not exist

## Logical operators to help identify and missing data

operator |description
-----|-----|-----:
`is.na`|is NAN or NA
`is.nan`|is NAN
`!is.na`|is not NAN or NA
`!is.nan`|is not NAN
`is.infinite`|is infinite
`any`|are any TRUE
`all`|all are TRUE
`which`|which are TRUE

## More logical operators examples

```{r echo=TRUE}
test <- c(0,NA, -1)/0
test
is.na(test)
is.nan(test)
is.infinite(test)
```

## More logical operators examples

`any(is.na(x))` means do we have any `NA`'s in the object `x`?

```{r  echo=TRUE}
any(is.na(df$IgG_concentration)) # are there any NAs - YES/TRUE
any(is.na(df$slum)) # are there any NAs- NO/FALSE
```

`which(is.na(x))` means which of the elements in object `x` are `NA`'s?

```{r  echo=TRUE}
which(is.na(df$IgG_concentration)) 
which(is.na(df$slum)) 
```

## `subset()` function

The Base R `subset()` function is a slightly easier way to select variables and observations.

```{r echo=TRUE, eval=FALSE}
?subset
```

```{r, echo = FALSE, results = "asis"}
library(printr)
?subset
```

## Subsetting use the `subset()` function

Here are a few examples using the `subset()` function

```{r echo=T}
df_lte10_v2 <- subset(df, df$age<=10, select=c(IgG_concentration, age))
df_lt5_f <- subset(df, df$age<=5 & gender=="Female", select=c(IgG_concentration, slum))
```

## `subset()` function vs logical operators

`subset()` automatically removes NAs, which is a different behavior from doing logical operations on NAs.

```{r echo=T}
summary(df_lte10$age) #created with indexing
summary(df_lte10_v2$age) #created with the subset function
```

We can also see this by looking at the number or rows in each dataset.

```{r echo=T}
nrow(df_lte10)
nrow(df_lte10_v2)
```



## Summary

- `colnames()`, `str()` and `summary()`functions from Base R are functions to assess the data type and some summary statistics
- There are three basic indexing syntax: `[`, `[[` and `$`
- Indexing can be used to extract part of an object (e.g., subset data) and to replace parts of an object (e.g., rename variables / columns)
- Logical operators can be evaluated on object(s) in order to return a binary response of TRUE/FALSE, and are useful for decision rules for indexing
- There are 7 “types” of missing values, the most common being “NA”
- Logical operators meant to determine missing values are very helpful for data cleaning
- The Base R `subset()` function is a slightly easier way to select variables and observations.

## Acknowledgements

These are the materials we looked through, modified, or extracted to complete this module's lecture.

-   ["Introduction to R for Public Health Researchers" Johns Hopkins University](https://jhudatascience.org/intro_to_r/)
-   ["Indexing" CRAN Project](https://cran.r-project.org/doc/manuals/R-lang.html#Indexing)
-   ["Logical operators" CRAN Project](https://cran.r-project.org/web/packages/extraoperators/vignettes/logicals-vignette.html)

