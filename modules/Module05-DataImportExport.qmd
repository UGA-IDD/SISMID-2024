---
title: "Module 5: Data Import and Export"
format: 
  revealjs:
    scrollable: true
    smaller: true
    toc: false
---

## Learning Objectives

After module 5, you should be able to...

-   Use Base R functions to load data
-   Install and attach external R Packages to extend R's functionality
-   Load any type of data into R
-   Find loaded data in the Environment pane of RStudio
-   Reading and writing R .Rds and .Rda/.RData files


## Import (read) Data

-   Importing or 'Reading in' data are the first step of any real project / data analysis
-   R can read almost any file format, especially with external, non-Base R, packages
-   We are going to focus on simple delimited files first. 
    -   comma separated (e.g. '.csv')
    -   tab delimited (e.g. '.txt')

A delimited file is a sequential file with column delimiters. Each delimited file is a stream of records, which consists of fields that are ordered by column. Each record contains fields for one row. Within each row, individual fields are separated by column **delimiters** (IBM.com definition)

## Mini exercise

1. Download Module 5 data from the website and save the data to your data subdirectory -- specifically `SISMID_IntroToR_RProject/data`

1. Open the '.csv' and '.txt' data files in a text editor application and familiarize yourself with the data (i.e., Notepad for Windows and TextEdit for Mac)

1. Open the '.xlsx' data file in excel and familiarize yourself with the data
		-		if you use a Mac **do not** open in Numbers, it can corrupt the file
		-		if you do not have excel, you can upload it to Google Sheets

1. Determine the delimiter of the two '.txt' files


## Import delimited data

Within the Base R 'util' package we can find a handful of useful functions including  `read.csv()` and `read.delim()` to importing data.

```{r eval=FALSE, echo=TRUE}
?read.csv
```

```{r echo=FALSE}
library(printr)
?read.csv
```

## Import .csv files

Function signature reminder
```
read.csv(file, header = TRUE, sep = ",", quote = "\"",
         dec = ".", fill = TRUE, comment.char = "", ...)
```

		-		`file` is the first argument and is the path to your file, in quotes 
		
				-		can be path in your local computer -- absolute file path or relative file path 
				-		can be path to a file on a website

## Mini exercise

If your R Project is not already open, open it so we take advantage of it setting a useful working directory for us in order to import data.


## Import .csv files

Lets import a new data file

```{r, echo=TRUE, eval = FALSE}
## Examples
df <- read.csv(file = "data/serodata.csv") #relative path
```


Note #1, I assigned the data frame to an object called `df`.  I could have called the data anything, but in order to use the data (i.e., as an object we can find in the Environment), I need to assign it as an object. 

Note #2, Look to the Environment pane, you will see the `df` object ready to be used.


## Import .txt files

`read.csv()` is a special case of `read.delim()` -- a general function to read a delimited file into a data frame  

Reminder function signature
```
read.delim(file, header = TRUE, sep = "\t", quote = "\"",
           dec = ".", fill = TRUE, comment.char = "", ...)
```

		- `file` is the path to your file, in quotes 
		- `delim` is what separates the fields within a record. The default for csv is comma

## Import .txt files

Lets first import 'serodata1.txt' which uses a tab delimiter and 'serodata2.txt' which uses a semicolon delimiter.


```{r, eval = FALSE}
## Examples
df <- read.delim(file = "data/serodata.txt", sep = "\t")
df <- read.delim(file = "data/serodata.txt", sep = ";")
```

The dataset is now successfully read into your R workspace, **many times actually.** Notice, that each time we imported the data we assigned the data to the `df` object, meaning we replaced it each time we reassinged the `df` object.  


## What if we have a .xlsx file - what do we do?

1. Google / Ask ChatGPT
2. Find and vet function and package you want
3. Install package
4. Attach package
5. Use function


## 1. Internet Search

```{r, out.width = "100%", echo = FALSE}
knitr::include_graphics("images/ChatGPT.png")
knitr::include_graphics("images/GoogleSearch.png")
knitr::include_graphics("images/StackOverflow.png")
```

## 2. Find and vet function and package you want

I am getting consistent message to use the the `read_excel()` function found in the `readxl` package.  This package was developed by Hadley Wickham, who we know is reputable. Also, you can check that data was read in correctly, b/c this is a straightforward task. 

## 3. Install Package

To use the bundle or "package" of code (and or possibly data) from a package, you need to install and also call the package.

To install a package you can 

1. go to Tools ---\> Install Packages in the RStudio header

OR

2. use the following code:
```{r echo=TRUE, eval=FALSE}
install.packages("package_name")
```


Therefore,

```{r echo=TRUE, eval=FALSE}
install.packages("readxl")
```

## 4. Attach Package

Reminder - To attach (i.e., be able to use the package) you can use the following code:
```{r echo=TRUE, eval=FALSE}
require(package_name)
```

Therefore, 

```{r echo=TRUE, eval=FALSE}
require(readxl)
```

## 5. Use Function

```{r eval=FALSE, echo=TRUE}
?read_excel
```

```{r, echo = FALSE, results = "asis"}
library(printr)
library(readxl)
?read_excel
```

## 5. Use Function

Reminder of function signature
```
read_excel(
  path,
  sheet = NULL,
  range = NULL,
  col_names = TRUE,
  col_types = NULL,
  na = "",
  trim_ws = TRUE,
  skip = 0,
  n_max = Inf,
  guess_max = min(1000, n_max),
  progress = readxl_progress(),
  .name_repair = "unique"
)
```

Let's practice
```{r echo=TRUE, eval=FALSE}
df <- read_excel(path = "data/serodata.xlsx", sheet = "Data")
```


## Lets make some mistakes

1. What if we read in the data without assigning it to an object (i.e., `read_excel(path = "data/serodata.xlsx", sheet = "Data")`)?

2. What if we forget to specify the sheet argument? (i.e., `dd <- read_excel(path = "data/serodata.xlsx")`)?


## Installing and calling packages - Common confusion

</br>

You only need to install a package once (unless you update R or want to update the package), but you will need to call or load a package each time you want to use it. 

</br>

The exception to this rule are the "base" set of packages (i.e., **Base R**) that are installed automatically when you install R and that automatically called whenever you open R or RStudio.


## Common Error

Be prepared to see this error

```{r echo=TRUE, eval=FALSE}
Error: could not find function "some_function_name"
```

This usually means that either 

- you called the function by the wrong name 
- you have not installed a package that contains the function
- you have installed a package but you forgot to attach it (i.e., `require(package_name)`) -- **most likely**


## Export (write) Data 

-   Exporting or 'Writing out' data allows you to save modified files for future use or sharing
-   R can write almost any file format, especially with external, non-Base R, packages
-   We are going to focus again on writing delimited files


## Export delimited data

Within the Base R 'util' package we can find a handful of useful functions including  `write.csv()` and `write.table()` to exporting data.

```{r echo=FALSE}
library(printr)
?write.csv
```

## Export delimited data

Let's practice exporting the data as three files with three different delimiters (comma, tab, semicolon)

```{r echo=TRUE, eval=FALSE}
write.csv(df, file="data/serodata_new.csv", row.names = FALSE) #comma delimited
write.table(df, file="data/serodata1_new.txt", sep="\t", row.names = FALSE) #tab delimited
write.table(df, file="data/serodata2_new.txt", sep=";", row.names = FALSE) #semicolon delimited
```

Note, I wrote the data to new file names.  Even though we didn't change the data at all in this module, it is good practice to keep raw data raw, and not to write over it.

## R .rds and .rda/RData files

There are two file extensions worth discussing.

R has two native data formatsâ€”'Rdata' (sometimes shortened to 'Rda') and 'Rds'. These formats are used when R objects are saved for later use. 'Rdata' is used to save multiple R objects, while 'Rds' is used to save a single R object. 'Rds' is fast to write/read and is very small.

## .rds binary file

Saving datasets in `.rds` format can save time if you have to read it back in later.

`write_rds()` and `read_rds()` from `readr` package can be used to write/read a single R object to/from file.

```
library(readr)
write_rds(object1, file = "filename.rds")
object1 <- read_rds(file = "filename.rds")
```


## .rda/RData files 

The Base R functions `save()` and `load()` can be used to save and load multiple R objects. 

`save()` writes an external representation of R objects to the specified file, and can by loaded back into the environment using `load()`. A nice feature about using `save` and `load` is that the R object(s) is directly imported into the environment and you don't have to specify the name. The files can be saved as `.RData` or `.Rda` files.

Function signature
```
save(object1, object2, file = "filename.RData")
load("filename.RData")
```

Note, that you separate the objects you want to save with commas.



## Summary

- Importing or 'Reading in' data are the first step of any real project /  data analysis
- The Base R 'util' package has useful functions including  `read.csv()` and `read.delim()` to importing/reading data or `write.csv()` and `write.table()` for exporting/writing data
- When importing data (exception is object from .RData), you must assign it to an object, otherwise it cannot be used
- If data are imported correctly, they can be found in the Environment pane of RStudio
- You only need to install a package once (unless you update R or the package), but you will need to attach a package each time you want to use it. 
- To complete a task you don't know how to do (e.g., reading in an excel data file) use the following steps: 1. Google / Ask ChatGPT, 2. Find and vet function and package you want, 3. Install package, 4. Attach package, 5. Use function


## Acknowledgements

These are the materials we looked through, modified, or extracted to complete this module's lecture.

-   ["Introduction to R for Public Health Researchers" Johns Hopkins University](https://jhudatascience.org/intro_to_r/)

